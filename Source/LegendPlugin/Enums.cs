////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2009, Daniel Kollmann
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted
// provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice, this list of conditions
//   and the following disclaimer.
//
// - Redistributions in binary form must reproduce the above copyright notice, this list of
//   conditions and the following disclaimer in the documentation and/or other materials provided
//   with the distribution.
//
// - Neither the name of Daniel Kollmann nor the names of its contributors may be used to endorse
//   or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
// WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;

namespace LegendPlugin
{
    /*
	public enum UnitType { BotAI, Needle, Transporter }
	public enum EntityType { BotAI, HoshimiPointWithNeedle, HoshimiPointWithoutNeedle, Needle, OXY, Transporter }
	public enum BuildUnitType { Needle, Transporter }
    */

    //Timer Type
    public enum TimerType { SUSPECT_TARGET_RESPONSE_DELAY_TIMER, /*FIRST_LOGIC_CHARACTER_TIMER,*/ THREAT_AWARE_TIMEOUT_TIMER, THREAT_AWARE_DURATION_TIMER, SEARCH_TIMEOUT_TIMER, BACKSTAGE_STALK_TIMEOUT_TIMER, AMBUSH_TIMEOUT_TIMER, ATTACK_BAN_TIMER, MELEE_ATTACK_BAN_TIMER, VENT_BAN_TIMER, NPC_STAY_IN_COVER_SHOOT_TIMER, NPC_JUST_LEFT_COMBAT_TIMER, ATTACK_KEEP_CHASING_TIMER, DELAY_RETURN_TO_SPAWN_POINT_TIMER, TARGET_IN_CRAWLSPACE_TIMER, DURATION_SINCE_SEARCH_TIMER, HEIGHTENED_SENSES_TIMER, BACKSTAGE_STALK_PICK_KILLTRAP_TIMER, FLANKED_VENT_ATTACK_TIMER, THREAT_AWARE_VISUAL_RETENTION_TIMER, RESPONSE_TO_BACKSTAGE_ALIEN_TIMEOUT_TIMER, VENT_ATTRACT_TIMER, SEEN_PLAYER_AIM_WEAPON_TIMER, SEARCH_BAN_TIMER, OBSERVE_TARGET_TIMER, REPEATED_PATHFIND_FAILUREST_TIMER }

    //Frame Flag
    public enum FrameFlag { SUSPICIOUS_ITEM_LOW_PRIORITY, SUSPICIOUS_ITEM_MEDIUM_PRIORITY, SUSPICIOUS_ITEM_HIGH_PRIORITY, COULD_SEARCH, COULD_RESPOND_TO_HIDING_PLAYER, COULD_DO_SUSPICIOUS_ITEM_HIGH_PRIORITY, COULD_DO_SUSPECT_TARGET_RESPONSE_MOVE_TO }

    //Sound Type
    public enum SoundType { ALIEN_AFFECTED_BY_FLAME_THROWER, ALIEN_ATTACK, ALIEN_BREATH_SLOW_LOOP, ALIEN_CHARGE_TO_ATTACK, ALIEN_DAMAGED_BY_FLAME_THROWER, ALIEN_DAMAGED_BY_ORDNANCE, ALIEN_SEARCHING, ALIEN_SEARCHING_FAIL, ALIEN_STALKING, ALIEN_STARTS_SEARCHING, ALIEN_SUSPECTS_TARGET }

    //Withdraw State
    public enum WithdrawState { NOT_WITHDRAWING, NEEDS_TO_WITHDRAW, WITHDRAWING }

    //Flag Type
    public enum FlagType { RETREAT_GAUGE, STUN_DAMAGE_GAUGE, LOGIC_CHARACTER_FLAGS, DONE_BREAKOUT, SHOULD_RESET, DO_ASSAULT_ATTACK_CHECKS, IS_IN_VENT, BANNED_FROM_VENT, HAS_DONE_GRAPPLE_BREAK, HAS_RECEIVED_DOT, IS_SITTING, DONE_ESCALATION_JOB, SHOULD_BREAKOUT, SHOULD_ATTACK, SHOULD_HIT_AND_RUN, DONE_HIT_AND_RUN, ATTACK_HIDING_PLAYER, ALIEN_ALWAYS_KNOWS_WHEN_IN_VENT, IS_CORPSE_TRAP_ON_START, SHOULD_DESPAWN, ATTACK_HAS_GOT_WITHIN_ROUTING_THRESHOLD, LOCK_BACKSTAGE_STALK, TOTALLY_BLIND_IN_DARK, PLAYER_WON_HIDING_QTE, ANDROID_IS_INERT, ANDROID_IS_SHOWROOM_DUMMY, SHOULD_AMBUSH, NEVER_AGGRESSIVE, MUTE_DYNAMIC_DIALOGUE, DOING_THREAT_AWARE_ANIM, DONE_THREAT_AWARE, BLOCK_AMBUSH_AND_KILLTRAPS, PREVENT_GRAPPLES, PREVENT_ALL_ATTACKS, ALLOW_FLANKED_VENT_ATTACK, IGNORE_PLAYER_IN_VENT_BEHAVIOUR, USE_AIMED_STANCE_FOR_IDLE_JOBS, USE_AIMED_LOW_STANCE_FOR_IDLE_JOBS, CLOSE_TO_BACKSTAGE_ALIEN, IS_IN_EXPLOITABLE_AREA, IS_ON_LADDER, HAS_REPEATED_PATHFIND_FAILURES }

    //Shutdown Speed (requested)
    public enum RequestShutDownSpeed { SST_GRACEFULL, SST_EXPEDIENT, SST_CRITICAL }

    //Vent Lock Reasoning
    public enum VentLockReason { FLANKED_VENT_ATTACK_FROM_ATTACK, FLANKED_VENT_ATTACK_FROM_THREAT_AWARE }

    //Child State Type
    public enum ChildStateType { CHILD_DEFAULT, IGNORE_CHILD_FAIL }
}
